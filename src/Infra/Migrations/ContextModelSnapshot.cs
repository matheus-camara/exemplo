// <auto-generated />
using System;
using Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Eligibilities.Eligibility", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectedProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProId");

                    b.HasIndex("SelectedProjectId");

                    b.ToTable("Eligibility", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Projects.Project", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MinimumScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Project", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e6faf34-8fa0-4efe-94db-c5fe1171c587"),
                            MinimumScore = 10,
                            Name = "Calculate the Dark Matter of the universe for Nasa"
                        },
                        new
                        {
                            Id = new Guid("5ff11d56-9b9d-4e9f-9be1-90609fc426ee"),
                            MinimumScore = 5,
                            Name = "Determine if the Schrodinger's cat is alive"
                        },
                        new
                        {
                            Id = new Guid("15c03f0a-0cf5-4da3-a662-446c76d095b5"),
                            MinimumScore = 3,
                            Name = "Attend to users support for a YXZ Company"
                        },
                        new
                        {
                            Id = new Guid("873f4ece-db97-4a63-8e8f-1712e9659b60"),
                            MinimumScore = 2,
                            Name = "Collect specific people information from their social media for XPTO Company"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Pros.Pro", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("EducationLevel")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasMinimunRequirementsForEligibility")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<double>("WritingScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Pro", (string)null);
                });

            modelBuilder.Entity("ElegibleProjects", b =>
                {
                    b.Property<Guid>("ElegibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EligibleProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ElegibleId", "EligibleProjectsId");

                    b.HasIndex("EligibleProjectsId");

                    b.ToTable("ElegibleProjects");
                });

            modelBuilder.Entity("InelegibleProjects", b =>
                {
                    b.Property<Guid>("InelegibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IneligibleProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InelegibleId", "IneligibleProjectsId");

                    b.HasIndex("IneligibleProjectsId");

                    b.ToTable("InelegibleProjects");
                });

            modelBuilder.Entity("Infra.Entities.ReferralCodeEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ReferralCode", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3811e1db-55ae-48f9-a220-427cf1ae1b0d"),
                            Code = "token1234"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Eligibilities.Eligibility", b =>
                {
                    b.HasOne("Domain.Entities.Pros.Pro", "Pro")
                        .WithMany()
                        .HasForeignKey("ProId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.Project", "SelectedProject")
                        .WithMany()
                        .HasForeignKey("SelectedProjectId");

                    b.Navigation("Pro");

                    b.Navigation("SelectedProject");
                });

            modelBuilder.Entity("Domain.Entities.Pros.Pro", b =>
                {
                    b.OwnsOne("Domain.Entities.Pros.InternetTest", "InternetTest", b1 =>
                        {
                            b1.Property<Guid>("ProId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("DownloadSpeed")
                                .HasColumnType("float");

                            b1.Property<double>("UploadSpeed")
                                .HasColumnType("float");

                            b1.HasKey("ProId");

                            b1.ToTable("Pro");

                            b1.WithOwner()
                                .HasForeignKey("ProId");
                        });

                    b.OwnsOne("Domain.Entities.Pros.PastExperiences", "PastExperiences", b1 =>
                        {
                            b1.Property<Guid>("ProId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Sales")
                                .HasColumnType("bit");

                            b1.Property<bool>("Support")
                                .HasColumnType("bit");

                            b1.HasKey("ProId");

                            b1.ToTable("Pro");

                            b1.WithOwner()
                                .HasForeignKey("ProId");
                        });

                    b.Navigation("InternetTest")
                        .IsRequired();

                    b.Navigation("PastExperiences")
                        .IsRequired();
                });

            modelBuilder.Entity("ElegibleProjects", b =>
                {
                    b.HasOne("Domain.Entities.Eligibilities.Eligibility", null)
                        .WithMany()
                        .HasForeignKey("ElegibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("EligibleProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InelegibleProjects", b =>
                {
                    b.HasOne("Domain.Entities.Eligibilities.Eligibility", null)
                        .WithMany()
                        .HasForeignKey("InelegibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("IneligibleProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
